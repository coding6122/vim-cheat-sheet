{
	"vim": [
		{
			"command": ":help keyword",
			"desc": ":help keyword - open help for keyword"
		}, 
		{
			"command": ":o file",
			"desc": ":o file - open file"
		}, 
		{
			"command": ":saveas file",
			"desc": ":saveas file - save file as"
		}, 
		{
			"command": ":close",
			"desc": ":close - close current pane"
		}, 
		{
			"command": "K",
			"desc": "K - open man page for word under the cursor"
		}, 
		{
			"command": "h",
			"desc": "h - move cursor left"
		}, 
		{
			"command": "j",
			"desc": "j - move cursor down"
		}, 
		{
			"command": "H",
			"desc": "H - move to top of screen"
		}, 
		{
			"command": "M",
			"desc": "M - move to middle of screen"
		}, 
		{
			"command": "L",
			"desc": "L - move to bottom of screen"
		}, 
		{
			"command": "w",
			"desc": "w - jump forwards to the start of a word"
		}, 
		{
			"command": "W",
			"desc": "W - jump forwards to the start of a word (words can contain punctuation)"
		}, 
		{
			"command": "e",
			"desc": "e - jump forwards to the end of a word"
		}, 
		{
			"command": "E",
			"desc": "E - jump forwards to the end of a word (words can contain punctuation)"
		}, 
		{
			"command": "b",
			"desc": "b - jump backwards to the start of a word"
		}, 
		{
			"command": "B",
			"desc": "B - jump backwards to the start of a word (words can contain punctuation)"
		}, 
		{
			"command": "%",
			"desc": "% - move to matching character (default supported pairs: '()', '{}', '[]' - use :h matchpairs in vim for more info)"
		}, 
		{
			"command": "0",
			"desc": "0 - jump to the start of the line"
		}, 
		{
			"command": "^",
			"desc": "^ - jump to the first non-blank character of the line"
		}, 
		{
			"command": "$",
			"desc": "$ - jump to the end of the line"
		}, 
		{
			"command": "gg",
			"desc": "gg - go to the first line of the document"
		}, 
		{
			"command": "G",
			"desc": "G - go to the last line of the document"
		}, 
		{
			"command": "5G",
			"desc": "5G - go to line 5"
		}, 
		{
			"command": "fx",
			"desc": "fx - jump to next occurrence of character x"
		}, 
		{
			"command": "tx",
			"desc": "tx - jump to before next occurrence of character x"
		}, 
		{
			"command": "Fx",
			"desc": "Fx - jump to previous occurence of character x"
		}, 
		{
			"command": "Tx",
			"desc": "Tx - jump to after previous occurence of character x"
		}, 
		{
			"command": ";",
			"desc": "; - repeat previous f, t, F or T movement"
		}, 
		{
			"command": ",",
			"desc": ", - repeat previous f, t, F or T movement, backwards"
		}, 
		{
			"command": "zz",
			"desc": "zz - center cursor on screen"
		}, 
		{
			"command": "Ctrl + b",
			"desc": "Ctrl + b - move back one full screen"
		}, 
		{
			"command": "Ctrl + f",
			"desc": "Ctrl + f - move forward one full screen"
		}, 
		{
			"command": "Ctrl + d",
			"desc": "Ctrl + d - move forward 1/2 a screen"
		}, 
		{
			"command": "Ctrl + u",
			"desc": "Ctrl + u - move back 1/2 a screen"
		}, 
		{
			"command": "i",
			"desc": "i - insert before the cursor"
		}, 
		{
			"command": "I",
			"desc": "I - insert at the beginning of the line"
		},
		{
			"command": "a",
			"desc": "a - insert (append) after the cursor"
		}, 
		{
			"command": "A",
			"desc": "A - insert (append) at the end of the line"
		},
		{
			"command": "o",
			"desc": "o - append (open) a new line below the current line"
		}, 
		{
			"command": "O",
			"desc": "O - append (open) a new line above the current line"
		},
		{
			"command": "ea",
			"desc": "ea - insert (append) at the end of the word"
		}, 
		{
			"command": "Esc",
			"desc": "Esc - exit insert mode"
		},
		{
			"command": "y",
			"desc": "y - yank (copy) marked text"
		},
		{
			"command": "d",
			"desc": "d - delete marked text"
		},
		{
			"command": "~",
			"desc": "~ - switch case"
		},
		{
			"command": "yy",
			"desc": "yy - yank (copy) a line"
		},
		{
			"command": "2yy",
			"desc": "2yy - yank (copy) 2 lines"
		},
		{
			"command": "yw",
			"desc": "yw - yank (copy) the characters of the word from the cursor position to the start of the next word"
		},
		{
			"command": "y$",
			"desc": "y$ - yank (copy) to end of line"
		},
		{
			"command": "p",
			"desc": "p - put (paste) the clipboard after cursor"
		},
		{
			"command": "P",
			"desc": "P - put (paste) before cursor"
		},
		{
			"command": "dd",
			"desc": "dd - delete (cut) a line"
		},
		{
			"command": "2dd",
			"desc": "2dd - delete (cut) 2 lines"
		},
		{
			"command": "dw",
			"desc": "dw - delete (cut) the characters of the word from the cursor position to the start of the next word"
		},
		{
			"command": "D",
			"desc": "D - delete (cut) to the end of the line"
		},
		{
			"command": "d$",
			"desc": "d$ - delete (cut) to the end of the line"
		},
		{
			"command": "x",
			"desc": "x - delete (cut) character"
		},
		{
			"command": ".",
			"desc": ". - repeat last command"
		},
		{
			"command": "v",
			"desc": "v - start visual mode, mark lines, then do a command (like y-yank)"
		},
		{
			"command": "V",
			"desc": "V - start linewise visual mode"
		},
		{
			"command": "Ctrl + v",
			"desc": "Ctrl + v - start visual block mode"
		},
		{
			"command": "aw",
			"desc": "aw - mark a word"
		},
		{
			"command": "ab",
			"desc": "ab - a block with ()"
		},
		{
			"command": "aB",
			"desc": "aB - a block with {}"
		},
		{
			"command": "ib",
			"desc": "ib - inner block with ()"
		},
		{
			"command": "iB",
			"desc": "iB - inner block with {}"
		},
		{
			"command": ">",
			"desc": "> - shift text right"
		},
		{
			"command": "<",
			"desc": "< - shift text left"
		},
		{
			"command": ":reg",
			"desc": ":reg - show registers content"
		},
		{
			"command": ":marks",
			"desc": ":marks - list of marks"
		},
		{
			"command": "ma",
			"desc": "ma - set current position for mark A"
		},
		{
			"command": "qa",
			"desc": "qa - record macro a"
		},
		{
			"command": "q",
			"desc": "q - stop recording macro"
		},
		{
			"command": "/pattern",
			"desc": "/pattern - search for pattern"
		},
		{
			"command": "?pattern",
			"desc": "?pattern - search backward for pattern"
		},
		{
			"command": "\\vpattern",
			"desc": "\\vpattern - 'very magic' pattern: non-alphanumeric characters are interpreted as special regex symbols (no escaping needed)"
		},
		{
			"command": "n",
			"desc": "n - repeat search in same direction"
		},
		{
			"command": "N",
			"desc": "N - repeat search in opposite direction"
		},
		{
			"command": ":%s/old/new/g",
			"desc": ":%s/old/new/g - replace all old with new throughout file"
		},
		{
			"command": ":%s/old/new/gc",
			"desc": ":%s/old/new/gc - replace all old with new throughout file with confirmations"
		},
		{
			"command": ":noh",
			"desc": ":noh - remove highlighting of search matches"
		},
		{
			"command": ":vimgrep /pattern/ {file}",
			"desc": ":vimgrep /pattern/ {file} - search for pattern in multiple files e.g. :vimgrep /foo/ **/*"
		},
		{
			"command": ":tabnew",
			"desc": ":tabnew or :tabnew file - open a file in a new tab"	
		},
		{
			"command": ":e file",
			"desc": ":e file - edit a file in a new buffer"	
		},
		{
			"command": ":copen",
			"desc": ":copen - open a window containing the list of matches"	
		}
	]
}